# Creating a Custom Overworld with Only Custom Biomes in Minecraft Fabric 1.20.1

This document outlines best practices and working examples for creating a modded Overworld using only custom biomes, blocks, and mobs in Minecraft Fabric 1.20.1. It includes data-driven and code-based methods to ensure modern, compatible world generation.

---

## Step 1: Disable Vanilla Biomes and Replace with Custom Biomes

### Option A: Data-Driven World Preset (Recommended)
1. Create a world preset JSON at:
```
data/<your_mod>/worldgen/world_preset/custom_overworld.json
```
```json
{
  "dimensions": {
    "minecraft:overworld": {
      "generator": {
        "type": "minecraft:noise",
        "biome_source": {
          "type": "minecraft:multi_noise",
          "biomes": [
            {
              "biome": "yourmod:nile_river",
              "parameters": {
                "temperature": 0.5,
                "humidity": 0.5,
                "continentalness": 0.5,
                "erosion": 0.5,
                "depth": 0.0,
                "weirdness": 0.5,
                "offset": 0.0
              }
            }
          ]
        },
        "settings": "minecraft:overworld"
      },
      "type": "minecraft:overworld"
    }
  }
}
```

### Option B: Biolith (API Alternative)
- Use Biolith’s API to remove vanilla biomes:
```java
BiomeManager.INSTANCE.removeVanillaOverworldBiomes();
```
- Then register your custom biome:
```java
BiomeManager.INSTANCE.addOverworldBiome(YOUR_BIOME_KEY, new NoiseParameters(...));
```

---

## Step 2: Define and Register Custom Biomes

### In JSON:
```
data/<your_mod>/worldgen/biome/nile_river.json
```
```json
{
  "precipitation": "none",
  "effects": {
    "sky_color": 7907327,
    "water_color": 4159204,
    "water_fog_color": 329011,
    "fog_color": 12638463
  },
  "temperature": 0.8,
  "downfall": 0.2,
  "spawn_settings": {
    "creature_spawn_probability": 0.1,
    "spawns": []
  },
  "features": []
}
```

### In Code:
```java
public static final RegistryKey<Biome> NILE_RIVER = RegistryKey.of(RegistryKeys.BIOME, new Identifier("yourmod", "nile_river"));

public static Biome createNileRiverBiome() {
    return new Biome.Builder()
        .temperature(0.8F)
        .downfall(0.2F)
        .effects(new BiomeEffects.Builder()
            .fogColor(0xC0D8FF)
            .waterColor(0x3F76E4)
            .skyColor(0x78A7FF)
            .build())
        .spawnSettings(new Biome.SpawnSettings.Builder().build())
        .generationSettings(new Biome.GenerationSettings.Builder().build())
        .build();
}
```

---

## Step 3: Use Custom Blocks in Biome Features

### Register a Placed Feature
```java
public static final RegistryKey<PlacedFeature> NILE_ORE = RegistryKey.of(RegistryKeys.PLACED_FEATURE, new Identifier("yourmod", "nile_ore"));

Registry.register(BuiltinRegistries.PLACED_FEATURE, NILE_ORE.getValue(),
    new PlacedFeature(
        ConfiguredFeatures.ORE_IRON, // Your custom feature
        List.of(CountPlacementModifier.of(20), InSquarePlacementModifier.of(), HEIGHT_RANGE, BiomePlacementModifier.of())
    )
);
```

### Add Feature to Biome
```java
BiomeModifications.addFeature(
    BiomeSelectors.includeByKey(NILE_RIVER),
    GenerationStep.Feature.UNDERGROUND_ORES,
    NILE_ORE
);
```

---

## Step 4: Register Custom Mobs and Add to Biome

### Register Custom Entity
```java
public static final EntityType<CustomMob> CUSTOM_MOB = Registry.register(
    Registries.ENTITY_TYPE,
    new Identifier("yourmod", "custom_mob"),
    FabricEntityTypeBuilder.create(SpawnGroup.MONSTER, CustomMob::new)
        .dimensions(EntityDimensions.fixed(0.75f, 0.75f)).build()
);
```

### Add Spawn Settings
```java
BiomeModifications.addSpawn(
    BiomeSelectors.includeByKey(NILE_RIVER),
    SpawnGroup.MONSTER,
    CUSTOM_MOB,
    30, 1, 3
);
```

---

## Step 5: Embed Worldgen in Mod Data Pack

### Directory Structure
```
resources/
  └── data/
      └── yourmod/
          ├── worldgen/
          │   ├── biome/
          │   ├── configured_feature/
          │   ├── placed_feature/
          │   ├── world_preset/
          │   └── noise_settings/
```

- Use Misode’s Generator to build valid JSON:
  - https://misode.github.io/worldgen

- For custom surface rules:
  Modify `noise_settings/overworld.json` with entries like:
```json
{
  "if_biome": "yourmod:nile_river",
  "then_run": {
    "type": "minecraft:surface",
    "surface": {
      "top_material": { "Name": "yourmod:nile_sand" },
      "under_material": { "Name": "minecraft:sandstone" },
      "underwater_material": { "Name": "minecraft:gravel" }
    }
  }
}
```

---

## Step 6: Mixins (Only If Needed)

### Example: Replace Overworld Biome Source
```java
@Mixin(OverworldBiomeSource.class)
public class OverworldBiomeSourceMixin {
    @Inject(method = "getBiome", at = @At("HEAD"), cancellable = true)
    private void redirectBiome(..., CallbackInfoReturnable<Biome> cir) {
        cir.setReturnValue(YOUR_CUSTOM_BIOME);
    }
}
```
Use mixins *only* when necessary – prefer data or API-based solutions for stability.

---

## Step 7: Mod Compatibility Best Practices
- Tag your biomes properly (e.g., `#minecraft:is_forest`) for structure and mob logic.
- Use TerraBlender or Biolith to integrate with other mods.
- Provide a config to disable exclusive mode (include vanilla biomes).
- Don’t override global behavior unless scoped (e.g., Overworld only).

---

## Libraries to Consider
- [TerraBlender](https://github.com/TerraformersMC/TerraBlender)
- [Biolith](https://github.com/TerraformersMC/Biolith)
- [Fabric API BiomeModifications](https://fabricmc.net/wiki/tutorial:biome_modification)
- [Misode Generator](https://misode.github.io/worldgen)

This structure ensures a scalable, modern Overworld customization mod that can grow with your content and remain compatible with the broader Fabric ecosystem.

